// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [pg_trgm]
}

model GuildConfig {
  id               Int      @id @default(autoincrement())
  guildId          String   @unique
  adminRoleId      String?
  updatesChannelId String?
  timezone         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum Stage {
  CONFIGURATION
  REGISTRATION
  CHECKIN
  ONGOING
  COMPLETED
}

model Scrim {
  id                    Int       @id @default(autoincrement())
  guildId               String
  name                  String
  registrationStartTime DateTime
  registrationEndedTime DateTime?
  maxTeams              Int
  minPlayersPerTeam     Int
  maxPlayersPerTeam     Int
  maxSubstitutePerTeam  Int
  slotListMessageId     String?

  registrationChannelId String
  logsChannelId         String
  teamsChannelId        String
  discordCategoryId     String
  adminChannelId        String
  adminConfigMessageId  String
  stage                 Stage   @default(CONFIGURATION)
  autoCloseRegistration Boolean @default(true)

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  Team       Team[]
  TeamMember TeamMember[]
}

model Team {
  id                   Int       @id @default(autoincrement())
  scrimId              Int
  name                 String
  code                 String    @unique
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  teamDetailsMessageId String?
  registeredAt         DateTime?

  scrim      Scrim        @relation(fields: [scrimId], references: [id], onDelete: Cascade)
  TeamMember TeamMember[]
}

model TeamMember {
  id           Int      @id @default(autoincrement())
  teamId       Int
  userId       String
  scrimId      Int
  displayName  String
  isSubstitute Boolean  @default(false)
  isCaptain    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  team  Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  scrim Scrim @relation(fields: [scrimId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
  @@unique([scrimId, userId])
}

model BannedUser {
  id        Int      @id @default(autoincrement())
  guildId   String
  userId    String
  reason    String?
  createdAt DateTime @default(now())

  @@unique([guildId, userId])
}
