// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GuildConfig {
  id               Int      @id @default(autoincrement())
  guildId          String   @unique
  adminRoleId      String?
  updatesChannelId String?
  timezone         String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Scrim {
  id                    Int       @id @default(autoincrement())
  guildId               String
  name                  String
  registrationStartTime DateTime?
  maxTeams              Int
  minPlayersPerTeam     Int
  maxPlayersPerTeam     Int
  maxSubstitutePerTeam  Int

  // ########
  // Generated Details
  registrationChannelId String
  logsChannelId         String
  discordCategoryId     String
  adminChannelId        String
  adminConfigMessageId  String
  // ########

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Team      Team[]
}

model Team {
  id        Int      @id @default(autoincrement())
  scrimId   Int
  name      String
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  scrim      Scrim        @relation(fields: [scrimId], references: [id], onDelete: Cascade)
  TeamMember TeamMember[]
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  teamId    Int
  userId    String
  isCaptain Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}
